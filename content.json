{"meta":{"title":"平头哥的客人","subtitle":"个人博客","description":"个人博客","author":"邓慈平","url":"https://dengciping0716.github.io","root":"/"},"pages":[{"title":"","date":"2019-03-15T14:23:29.000Z","updated":"2019-03-15T14:28:30.163Z","comments":false,"path":"categories/index.html","permalink":"https://dengciping0716.github.io/categories/index.html","excerpt":"","text":""},{"title":"","date":"2019-03-15T14:23:43.000Z","updated":"2019-03-15T14:39:21.614Z","comments":false,"path":"tags/index.html","permalink":"https://dengciping0716.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Android JNI之cocos2D源码分析","slug":"JNI之cocos2D源码分析","date":"2019-04-05T11:21:12.000Z","updated":"2019-04-05T14:10:58.650Z","comments":true,"path":"b2dd0a04/","link":"","permalink":"https://dengciping0716.github.io/b2dd0a04/","excerpt":"","text":"Cocos2d 做为一个跨平台的游戏引擎，对于Android中java与C的互相调用很有借鉴意义。本文只分析一下Cocos2d JNI 部分的封装代码。 代码结构关于多平台的主要目录 cocos 主要源码 platform 支持不同平台的项目源码 android ios … external cocos依赖的一些第三方开源工具，比如openssl、freetype 等 C++ 调用 javacocos2d-x引擎对jni的操作进行了封装，提供了一个非常好用的类:JniHelper，定义了一些常用的接口 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105 typedef std::unordered_map&lt;JNIEnv*, std::vector&lt;jobject&gt;&gt; LocalRefMapType; static void setJavaVM(JavaVM *javaVM); static JavaVM* getJavaVM(); static JNIEnv* getEnv(); static jobject getActivity(); static bool setClassLoaderFrom(jobject activityInstance); static bool getStaticMethodInfo(JniMethodInfo &amp;methodinfo, const char *className, const char *methodName, const char *paramCode); static bool getMethodInfo(JniMethodInfo &amp;methodinfo, const char *className, const char *methodName, const char *paramCode); //转换java 字符串为C++字符串 static std::string jstring2string(jstring str); static jmethodID loadclassMethod_methodID; static jobject classloader; static std::function&lt;void()&gt; classloaderCallback; /** 调用java 无返回值的静态函数 @brief Call of Java static void method @if no such method will log error */ template &lt;typename... Ts&gt; static void callStaticVoidMethod(const std::string&amp; className, const std::string&amp; methodName, Ts... xs) &#123; cocos2d::JniMethodInfo t; std::string signature = \"(\" + std::string(getJNISignature(xs...)) + \")V\"; if (cocos2d::JniHelper::getStaticMethodInfo(t, className.c_str(), methodName.c_str(), signature.c_str())) &#123; LocalRefMapType localRefs; t.env-&gt;CallStaticVoidMethod(t.classID, t.methodID, convert(localRefs, t, xs)...); t.env-&gt;DeleteLocalRef(t.classID); deleteLocalRefs(t.env, localRefs); &#125; else &#123; reportError(className, methodName, signature); &#125; &#125; /**======================================== 还有很多类似的静态函数调用 callStaticBooleanMethod、callStaticIntMethod 。。。 template &lt;typename... Ts&gt; 类似于java中的泛型 通过 template &lt;typename... Ts&gt; 和 getJNISignature 根据实参自动拼接出调用java函数需要的参数类型字符串 ========================================*/ static std::string getJNISignature() &#123; return \"\"; &#125; static std::string getJNISignature(bool) &#123; return \"Z\"; &#125; static std::string getJNISignature(char) &#123; return \"C\"; &#125; static std::string getJNISignature(short) &#123; return \"S\"; &#125; static std::string getJNISignature(int) &#123; return \"I\"; &#125; static std::string getJNISignature(long) &#123; return \"J\"; &#125; static std::string getJNISignature(float) &#123; return \"F\"; &#125;static std::string getJNISignature(double) &#123; return \"D\"; &#125; static std::string getJNISignature(const char*) &#123; return \"Ljava/lang/String;\"; &#125; static std::string getJNISignature(const std::string&amp;) &#123; return \"Ljava/lang/String;\"; &#125; template &lt;typename T&gt; static std::string getJNISignature(T x) &#123; // This template should never be instantiated static_assert(sizeof(x) == 0, \"Unsupported argument type\"); return \"\"; &#125; template &lt;typename T, typename... Ts&gt; static std::string getJNISignature(T x, Ts... xs) &#123; return getJNISignature(x) + getJNISignature(xs...); &#125; java 调用C++函数看过java JNI 的同学应该都了解过了。这里只简单说一下大概流程不做详细赘述了。 首先我们会在java 类中定义native函数 private static native void nativeTouchesBegin(final int id, final float x, final float y); 然后我们在c++ 中定义对应的实现函数。需要注意的是java 类型和C类型的转换。下面展示一下cocos 对触摸事件的封装。凑字数了哈哈。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495// TouchesJni.cpp#include \"base/CCDirector.h\"#include \"base/CCEventKeyboard.h\"#include \"base/CCEventDispatcher.h\"#include \"platform/android/CCGLViewImpl-android.h\"#include &lt;android/log.h&gt;#include &lt;jni.h&gt;using namespace cocos2d;extern \"C\" &#123; JNIEXPORT void JNICALL Java_org_cocos2dx_lib_Cocos2dxRenderer_nativeTouchesBegin(JNIEnv * env, jobject thiz, jint id, jfloat x, jfloat y) &#123; intptr_t idlong = id; cocos2d::Director::getInstance()-&gt;getOpenGLView()-&gt;handleTouchesBegin(1, &amp;idlong, &amp;x, &amp;y); &#125; JNIEXPORT void JNICALL Java_org_cocos2dx_lib_Cocos2dxRenderer_nativeTouchesEnd(JNIEnv * env, jobject thiz, jint id, jfloat x, jfloat y) &#123; intptr_t idlong = id; cocos2d::Director::getInstance()-&gt;getOpenGLView()-&gt;handleTouchesEnd(1, &amp;idlong, &amp;x, &amp;y); &#125; JNIEXPORT void JNICALL Java_org_cocos2dx_lib_Cocos2dxRenderer_nativeTouchesMove(JNIEnv * env, jobject thiz, jintArray ids, jfloatArray xs, jfloatArray ys) &#123; int size = env-&gt;GetArrayLength(ids); jint id[size]; jfloat x[size]; jfloat y[size]; env-&gt;GetIntArrayRegion(ids, 0, size, id); env-&gt;GetFloatArrayRegion(xs, 0, size, x); env-&gt;GetFloatArrayRegion(ys, 0, size, y); intptr_t idlong[size]; for(int i = 0; i &lt; size; i++) idlong[i] = id[i]; cocos2d::Director::getInstance()-&gt;getOpenGLView()-&gt;handleTouchesMove(size, idlong, x, y); &#125; JNIEXPORT void JNICALL Java_org_cocos2dx_lib_Cocos2dxRenderer_nativeTouchesCancel(JNIEnv * env, jobject thiz, jintArray ids, jfloatArray xs, jfloatArray ys) &#123; int size = env-&gt;GetArrayLength(ids); jint id[size]; jfloat x[size]; jfloat y[size]; env-&gt;GetIntArrayRegion(ids, 0, size, id); env-&gt;GetFloatArrayRegion(xs, 0, size, x); env-&gt;GetFloatArrayRegion(ys, 0, size, y); intptr_t idlong[size]; for(int i = 0; i &lt; size; i++) idlong[i] = id[i]; cocos2d::Director::getInstance()-&gt;getOpenGLView()-&gt;handleTouchesCancel(size, idlong, x, y); &#125;#define KEYCODE_BACK 0x04#define KEYCODE_MENU 0x52#define KEYCODE_DPAD_UP 0x13#define KEYCODE_DPAD_DOWN 0x14#define KEYCODE_DPAD_LEFT 0x15#define KEYCODE_DPAD_RIGHT 0x16#define KEYCODE_ENTER 0x42#define KEYCODE_PLAY 0x7e#define KEYCODE_DPAD_CENTER 0x17 static std::unordered_map&lt;int, cocos2d::EventKeyboard::KeyCode&gt; g_keyCodeMap = &#123; &#123; KEYCODE_BACK , cocos2d::EventKeyboard::KeyCode::KEY_ESCAPE&#125;, &#123; KEYCODE_MENU , cocos2d::EventKeyboard::KeyCode::KEY_MENU&#125;, &#123; KEYCODE_DPAD_UP , cocos2d::EventKeyboard::KeyCode::KEY_DPAD_UP &#125;, &#123; KEYCODE_DPAD_DOWN , cocos2d::EventKeyboard::KeyCode::KEY_DPAD_DOWN &#125;, &#123; KEYCODE_DPAD_LEFT , cocos2d::EventKeyboard::KeyCode::KEY_DPAD_LEFT &#125;, &#123; KEYCODE_DPAD_RIGHT , cocos2d::EventKeyboard::KeyCode::KEY_DPAD_RIGHT &#125;, &#123; KEYCODE_ENTER , cocos2d::EventKeyboard::KeyCode::KEY_ENTER&#125;, &#123; KEYCODE_PLAY , cocos2d::EventKeyboard::KeyCode::KEY_PLAY&#125;, &#123; KEYCODE_DPAD_CENTER , cocos2d::EventKeyboard::KeyCode::KEY_DPAD_CENTER&#125;, &#125;; JNIEXPORT jboolean JNICALL Java_org_cocos2dx_lib_Cocos2dxRenderer_nativeKeyEvent(JNIEnv * env, jobject thiz, jint keyCode, jboolean isPressed) &#123; Director* pDirector = Director::getInstance(); auto iterKeyCode = g_keyCodeMap.find(keyCode); if (iterKeyCode == g_keyCodeMap.end()) &#123; return JNI_FALSE; &#125; cocos2d::EventKeyboard::KeyCode cocos2dKey = g_keyCodeMap.at(keyCode); cocos2d::EventKeyboard event(cocos2dKey, isPressed); cocos2d::Director::getInstance()-&gt;getEventDispatcher()-&gt;dispatchEvent(&amp;event); return JNI_TRUE; &#125;&#125;","categories":[{"name":"Android","slug":"android","permalink":"https://dengciping0716.github.io/categories/android/"}],"tags":[{"name":"JNI","slug":"JNI","permalink":"https://dengciping0716.github.io/tags/JNI/"}]},{"title":"常用shell命令","slug":"常用shell命令","date":"2019-03-27T09:33:06.000Z","updated":"2019-04-05T13:56:19.096Z","comments":true,"path":"e2fa9704/","link":"","permalink":"https://dengciping0716.github.io/e2fa9704/","excerpt":"","text":"1. 压缩/解压缩 zip12345# 把mydata目录压缩为mydata.zipzip -r mydata.zip mydata# 把abc文件夹和123.txt压缩成为abc123.zipzip -r abc123.zip abc 123.txt unzip1234567891011121314# 把zip解压到xxx目录里面unzip xxx.zip -d 目录# 把abc12.zip、abc23.zip、abc34.zip同时解压到目录里面unzip abc\\*.zip# 查看zip里面的内容unzip -v xxx.zip# 验证zip是否完整unzip -t xxx.zip# 把zip里面的所有文件解压到第一级目录unzip -j xxx.zip tar1234567891011121314常用命令选项-c Create -r Add/Replace -t List -u Update -x Extract 提取-v ：细报告tar处理的文件信息。如无此选项，tar不报告文件信息。 -f ：存档位置# 压缩tar czvf home.tar.gz /home#解压缩tar xzvf home.tar.gz 2. scp 传输文件 12345# 复制本地目录到远程scp -r local_folder remote_username@remote_ip:remote_folder # 拉取远程目录到本地scp -r remote_username@remote_ip:remote_folder local_folder","categories":[{"name":"shell","slug":"shell","permalink":"https://dengciping0716.github.io/categories/shell/"}],"tags":[{"name":"shell","slug":"shell","permalink":"https://dengciping0716.github.io/tags/shell/"}]},{"title":"Hexo实战记录(四): 常用命令","slug":"Hexo实战记录-四-常用命令","date":"2019-03-18T13:52:35.000Z","updated":"2019-04-05T14:19:42.329Z","comments":true,"path":"9e4e42dc/","link":"","permalink":"https://dengciping0716.github.io/9e4e42dc/","excerpt":"","text":"基本操作 hexo g 生成/public 文件夹，里面是网站 hexo g -d 生成/public 文件夹，里面是网站 ,文件生成后立即部署网站 hexo d -g 把这个网站文件夹推送到服务器 hexo clean 删除网站文件夹 hexo s 本地查看效果 新建一篇文章1$ hexo new [layout] &lt;title&gt; 新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。","categories":[{"name":"hexo","slug":"hexo","permalink":"https://dengciping0716.github.io/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://dengciping0716.github.io/tags/hexo/"}]},{"title":"Hexo实战记录(三)：next主题配置","slug":"Hexo实战记录-三-：next主题配置","date":"2019-03-17T14:38:37.000Z","updated":"2019-04-05T14:06:49.891Z","comments":true,"path":"7009eb85/","link":"","permalink":"https://dengciping0716.github.io/7009eb85/","excerpt":"next 官网文档 配置主题风格这里我选择一种紧凑风格123456789# ---------------------------------------------------------------# Scheme Settings# ---------------------------------------------------------------# Schemes# scheme: Muse# scheme: Mist# scheme: Piscesscheme: Gemini","text":"next 官网文档 配置主题风格这里我选择一种紧凑风格123456789# ---------------------------------------------------------------# Scheme Settings# ---------------------------------------------------------------# Schemes# scheme: Muse# scheme: Mist# scheme: Piscesscheme: Gemini 配置分类和标签页面 配置 导航条 出现分类和标签修改theme/next/_config.yml 123456menu: home: / || home #about: /about/ || user tags: /tags/ || tags categories: /categories/ || th archives: /archives/ || archive 创建页面 12hexo new page categorieshexo new page tags 编辑 source/tags/index.md 和 source/categories/index.md 123#type 为tags 或者 categories 和功能对应type: &quot;tags&quot;comments: false 配置 github 等社交链接修改theme/next/_config.yml12345678# Social Links# Usage: `Key: permalink || icon`# Key is the link label showing to end users.# Value before `||` delimeter is the target permalink.# Value after `||` delimeter is the name of FontAwesome icon. If icon (with or without delimeter) is not specified, globe icon will be loaded.social: #GitHub: https://github.com/yourname || github #E-Mail: mailto:yourname@gmail.com || envelope 设置首页不显示全文(只显示预览)修改theme/next/_config.yml12345# Automatically Excerpt. Not recommend.# Use &lt;!-- more --&gt; in the post to control excerpt accurately.auto_excerpt: enable: true length: 150","categories":[{"name":"hexo","slug":"hexo","permalink":"https://dengciping0716.github.io/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://dengciping0716.github.io/tags/hexo/"}]},{"title":"Hexo实战记录(二)：写作配置","slug":"Hexo实战记录-二-：写作配置","date":"2019-03-16T13:37:21.000Z","updated":"2019-04-05T14:09:46.215Z","comments":true,"path":"61542/","link":"","permalink":"https://dengciping0716.github.io/61542/","excerpt":"命令：创建一篇文章1$ hexo new [layout] &lt;title&gt; 文章链接唯一化方案1 使用插件 hexo-abbrlink 1234# 安装npm install hexo-abbrlink --save#使用：修改_config.ymlpermalink: :abbrlink/","text":"命令：创建一篇文章1$ hexo new [layout] &lt;title&gt; 文章链接唯一化方案1 使用插件 hexo-abbrlink 1234# 安装npm install hexo-abbrlink --save#使用：修改_config.ymlpermalink: :abbrlink/ 方案2 修改文章网址配置 _config.yml 文件中修改 permalink 12#permalink: :year/:month/:day/:title # 这是原配置permalink: :category/:id/ .\\scaffolds\\post.md 模板文件中修改为: 1234567title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;update : &#123;&#123;date&#125;&#125;#增加手写ID值id: categories: tags: category_map实现分组映射 让中文分组名在网址中显示为英文 修改博客配置文件_config.yml： 12345## 为了让中文分组名在网址中显示为英文，我们可以创建分组名映射（category_map）：category_map: Android基础: android-base Hexo: hexo# tag_map 同理设置","categories":[{"name":"hexo","slug":"hexo","permalink":"https://dengciping0716.github.io/categories/hexo/"}],"tags":[]},{"title":"Hexo实战记录(一)：安装配置","slug":"Hexo实战记录-一-：安装配置","date":"2019-03-15T11:30:55.000Z","updated":"2019-04-05T13:49:22.763Z","comments":true,"path":"30720/","link":"","permalink":"https://dengciping0716.github.io/30720/","excerpt":"安装​ 官网 基本操作 hexo g 生成/public 文件夹，里面是网站 hexo d 把这个网站文件夹推送到服务器 hexo clean 删除网站文件夹 hexo s 本地查看效果","text":"安装​ 官网 基本操作 hexo g 生成/public 文件夹，里面是网站 hexo d 把这个网站文件夹推送到服务器 hexo clean 删除网站文件夹 hexo s 本地查看效果 安装主题 这里我选择用 next 主题。查看主题配置 12345#进入项目根目录git clone https://github.com/theme-next/hexo-theme-next themes/next# 修改 _config.yml 配置theme: next 安装插件官网插件列表 常用插件： hexo-abbrlink 文章链接唯一化 1234# 安装npm install hexo-abbrlink --save#使用：修改_config.ymlpermalink: :abbrlink/ hexo-wordcount 字数统计 1npm install hexo-wordcount --save hexo-generator-json-content 1npm install hexo-generator-json-content --save hexo-generator-feed 1npm install hexo-generator-feed --save hexo-generator-sitemap 1npm install hexo-generator-sitemap --save hexo-neat 1npm install hexo-neat --save","categories":[{"name":"hexo","slug":"hexo","permalink":"https://dengciping0716.github.io/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://dengciping0716.github.io/tags/hexo/"}]}]}